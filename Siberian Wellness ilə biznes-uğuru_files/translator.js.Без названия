function t(phrase, params, isProperName) {
    if (!phrase)
        return;

    if (isProperName) {
        return transtiterate(phrase);
    }
    for (var key in params) {

        if (params[key].length > 0 || typeof params[key] == 'number') {
            phrase = phrase.replace(new RegExp('~' + key + '~', 'g'), '%%' + params[key] + '%%');
        } else {
            phrase = phrase.replace(new RegExp('~' + key + '~', 'g'), '');
        }
    }

    if (typeof dict === 'undefined') {
        return phrase.replace(new RegExp('%%', 'g'), '');
    }

    if (phrase.indexOf('%%') >= 0) {
        var i = 1;
        var words = [];

        var pattern = phrase.replace(/%%(.+?)%%/g, function(m, n){
            words[i] = n;
            return '%' + i++;
        });

        pattern = t(pattern);

        for (var index in words) {
            var word = words[index].replace(/[\(\)]/, '');
            pattern = pattern.replace('%' + index, word);
        }

        let matches = pattern.match(/\((.*)\)\((\d+)\)/);
        if (matches && matches.length) {
            let plurals = matches[1].split('||');
            let position = pluralize(matches[2], locale);
            pattern = position < matches.length ? plurals[position] : plurals[0];
        }
        return pattern;
    }

    let hash = md5(phrase);

    if (typeof dict[hash] !== 'undefined') {
        return dict[hash];
    }
    return phrase;
}

function transtiterate(name) {
    const cyrillicLocales = ['ru', 'kz', 'by', 'ua', 'mn'];

    if (cyrillicLocales.includes(locale)) {
        return name;
    }

    const symbolsMap = {
        'А': 'A',
        'а': 'a',
        'Б': 'B',
        'б': 'b',
        'В': 'V',
        'в': 'v',
        'Г': 'G',
        'г': 'g',
        'Д': 'D',
        'д': 'd',
        'Е': 'E',
        'е': 'e',
        'Ё': 'Yo',
        'ё': 'yo',
        'Ж': 'Zh',
        'ж': 'zh',
        'З': 'Z',
        'з': 'z',
        'И': 'I',
        'и': 'i',
        'Й': 'Y',
        'й': 'y',
        'К': 'K',
        'к': 'k',
        'Л': 'L',
        'л': 'l',
        'М': 'M',
        'м': 'm',
        'Н': 'N',
        'н': 'n',
        'О': 'O',
        'о': 'o',
        'П': 'P',
        'п': 'p',
        'Р': 'R',
        'р': 'r',
        'С': 'S',
        'с': 's',
        'Т': 'T',
        'т': 't',
        'У': 'U',
        'у': 'u',
        'Ф': 'F',
        'ф': 'f',
        'Х': 'X',
        'х': 'x',
        'Ц': 'C',
        'ц': 'c',
        'Ч': 'Ch',
        'ч': 'ch',
        'Ш': 'Sh',
        'ш': 'sh',
        'Щ': 'Sch',
        'щ': 'sch',
        'Ъ': "'",
        'ъ': "'",
        'Ы': 'Y\'',
        'ы': 'y\'',
        'Ь': '\'',
        'ь': '\'',
        'Э': 'E\'',
        'э': 'e\'',
        'Ю': 'Yu',
        'ю': 'yu',
        'Я': 'Ya',
        'я': 'ya'
    };

    return name.split('').map((symbol) => symbolsMap[symbol] || symbol).join('');
};

function pluralize(number, language) {
/*
 * The plural rules are derived from code of the Zend Framework (2010-09-25),
 * which is subject to the new BSD license (http://framework.zend.com/license/new-bsd).
 * Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
 */
    switch (language) {
        case 'az':
        case 'bo':
        case 'dz':
        case 'id':
        case 'ja':
        case 'jv':
        case 'ka':
        case 'km':
        case 'kn':
        case 'ko':
        case 'ms':
        case 'th':
        case 'tr':
        case 'vi':
        case 'zh':
            return 0;

        case 'af':
        case 'bn':
        case 'bg':
        case 'ca':
        case 'da':
        case 'de':
        case 'el':
        case 'en':
        case 'eo':
        case 'es':
        case 'et':
        case 'eu':
        case 'fa':
        case 'fi':
        case 'fo':
        case 'fur':
        case 'fy':
        case 'gl':
        case 'gu':
        case 'ha':
        case 'he':
        case 'hu':
        case 'is':
        case 'it':
        case 'ku':
        case 'lb':
        case 'ml':
        case 'mn':
        case 'mr':
        case 'nah':
        case 'nb':
        case 'ne':
        case 'nl':
        case 'nn':
        case 'no':
        case 'oc':
        case 'om':
        case 'or':
        case 'pa':
        case 'pap':
        case 'ps':
        case 'pt':
        case 'so':
        case 'sq':
        case 'sv':
        case 'sw':
        case 'ta':
        case 'te':
        case 'tk':
        case 'ur':
        case 'zu':
            return (1 == number) ? 0 : 1;

        case 'am':
        case 'bh':
        case 'fil':
        case 'fr':
        case 'gun':
        case 'hi':
        case 'hy':
        case 'ln':
        case 'mg':
        case 'nso':
        case 'xbr':
        case 'ti':
        case 'wa':
            return ((0 == number) || (1 == number)) ? 0 : 1;

        case 'be':
        case 'bs':
        case 'hr':
        case 'ru':
        case 'sr':
        case 'uk':
            return ((1 == number % 10) && (11 != number % 100)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2);

        case 'cs':
        case 'sk':
            return (1 == number) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2);

        case 'ga':
            return (1 == number) ? 0 : ((2 == number) ? 1 : 2);

        case 'lt':
            return ((1 == number % 10) && (11 != number % 100)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2);

        case 'sl':
            return (1 == number % 100) ? 0 : ((2 == number % 100) ? 1 : (((3 == number % 100) || (4 == number % 100)) ? 2 : 3));

        case 'mk':
            return (1 == number % 10) ? 0 : 1;

        case 'mt':
            return (1 == number) ? 0 : (((0 == number) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3));

        case 'lv':
            return (0 == number) ? 0 : (((1 == number % 10) && (11 != number % 100)) ? 1 : 2);

        case 'pl':
            return (1 == number) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2);

        case 'cy':
            return (1 == number) ? 0 : ((2 == number) ? 1 : (((8 == number) || (11 == number)) ? 2 : 3));

        case 'ro':
            return (1 == number) ? 0 : (((0 == number) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2);

        case 'ar':
            return (0 == number) ? 0 : ((1 == number) ? 1 : ((2 == number) ? 2 : (((number % 100 >= 3) && (number % 100 <= 10)) ? 3 : (((number % 100 >= 11) && (number % 100 <= 99)) ? 4 : 5))));

        default:
            return 0;
    }
}

